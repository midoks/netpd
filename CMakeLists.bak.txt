
MESSAGE(STATUS "Running cmake version ${CMAKE_VERSION}")
IF(WIN32)
	MESSAGE(STATUS "Not Support Window System")
ELSEIF(APPLE)
	#MACOSX_SYS=`sw_vers -productVersion`
	EXECUTE_PROCESS(COMMAND sw_vers
		OUTPUT_VARIABLE SW_VERS_OUTPUT
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)
	STRING(REPLACE "\n" ";" SW_VERS_OUTPUT_LIST "${SW_VERS_OUTPUT}")
	LIST(GET SW_VERS_OUTPUT_LIST 0 SW_VERS_PRODUCTNAME)
	LIST(GET SW_VERS_OUTPUT_LIST 1 SW_VERS_PRODUCTVERSION)
	STRING(REGEX MATCH
	        "ProductVersion:[\n\t ]*([0-9]+)\\.([0-9]+)" UNUSED ${SW_VERS_PRODUCTVERSION})
	IF(NOT DEFINED CMAKE_MATCH_1 OR NOT DEFINED CMAKE_MATCH_2)
		MESSAGE(FATAL_ERROR "Could not run sw_vers")
	ENDIF()
	SET(DEFAULT_PLATFORM "macos${CMAKE_MATCH_1}.${CMAKE_MATCH_2}")
	SET(DEFAULT_PLATFORM_VER "${CMAKE_MATCH_1}.${CMAKE_MATCH_2}")
	MESSAGE(STATUS "DEFAULT_PLATFORM:${DEFAULT_PLATFORM}")
	MESSAGE(STATUS "DEFAULT_PLATFORM_VER:${DEFAULT_PLATFORM_VER}")
ELSEIF(UNIX)
ENDIF()
cmake_minimum_required (VERSION 2.8)

# Will set GIT_EXECUTABLE and GIT_FOUND
#FIND_PACKAGE(Git)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)

#MESSAGE(STATUS "dd start")
add_custom_target(
    work-dir
    COMMAND "pwd"
    COMMAND "make" "MACOSX_DEPLOYMENT_TARGET=11.7"
    WORKING_DIRECTORY "build/deps/LuaJIT-2.1"
)
#MESSAGE(STATUS "dd end")

#MESSAGE(STATUS "dd2 start")
add_custom_target(
    work-dir2
    COMMAND "pwd"
    COMMAND "make" "install" "PREFIX=${CMAKE_CURRENT_SOURCE_DIR}/bin/luajit"
    WORKING_DIRECTORY "build/deps/LuaJIT-2.1"
)
#MESSAGE(STATUS "dd2 end")


IF(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/bin/luajit)
	MESSAGE(STATUS "luajit install start")
	execute_process(COMMAND mkdir -p bin)
	execute_process(COMMAND mkdir -p build/deps)
	execute_process(COMMAND cp -rf deps/LuaJIT-2.1 build/deps/LuaJIT-2.1)
	
	execute_process(COMMAND export MACOSX_DEPLOYMENT_TARGET=11.7)
	execute_process(COMMAND chmod 755 ${CMAKE_CURRENT_SOURCE_DIR}/install_lua.sh)

	execute_process(
		COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/install_lua.sh
		#WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build/deps/LuaJIT-2.1
	   	RESULT_VARIABLE CMD_ERROR
	   	OUTPUT_FILE CMD_OUTPUT)
	MESSAGE( STATUS "CMD_ERROR:" ${CMD_ERROR})
	MESSAGE( STATUS "CMD_OUTPUT:" ${CMD_OUTPUT})
	MESSAGE(STATUS "luajit install end")
ENDIF()
#set(LUA_SOURCE_DIR "deps/LuaJIT-2.1")

MESSAGE(STATUS "---------------------------------")

project(netpd)

MESSAGE(STATUS "---------------${CMAKE_CURRENT_LIST_DIR}/bin/luajit------------------")
#list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")
find_package(Lua REQUIRED)
include_directories(${CMAKE_CURRENT_LIST_DIR}/bin/luajit/include ${LUA_INCLUDE_DIR})


#include_directories(${PROJECT_SOURCE_DIR}/deps/LuaJIT-2.1/src)
#include_directories(${PROJECT_SOURCE_DIR}/bin/luajit/include/luajit-2.1)


aux_source_directory(src/lua DIR_SRCS_LUA)
add_subdirectory(src/lua)

include_directories(src/lua)

set(CMAKE_C_STANDARD 11)
set(SOURCE_FILES netpd.c)

add_executable(netpd ${SOURCE_FILES})
target_link_libraries(netpd netpd_lua)


MESSAGE(STATUS "VAR SOURCE_FILES: ${SOURCE_FILES}")
MESSAGE(STATUS "VAR LUA_LIBRARIES: ${LUA_LIBRARIES}")
MESSAGE(STATUS "---------------------------------")
MESSAGE(STATUS "COMPILE_DEFINITIONS: ${cwd_definitions}")
MESSAGE(STATUS "CMAKE_C_LINK_FLAGS: ${CMAKE_C_LINK_FLAGS}")
MESSAGE(STATUS "CMAKE_CXX_LINK_FLAGS: ${CMAKE_CXX_LINK_FLAGS}")
MESSAGE(STATUS "CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS}")
MESSAGE(STATUS "CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS}")
MESSAGE(STATUS "CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS}")
MESSAGE(STATUS "CMAKE_CURRENT_SOURCE_DIR:${CMAKE_CURRENT_SOURCE_DIR}")
